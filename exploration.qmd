---
title: "Exploration des données"
title-block-banner: false
description: | 
  Cette page recense des statistiques descriptives issues des données. Elles sont utilisées afin d'explorer les variables et de choisir des données intéressantes pour des analyses multivariées. 
author:
  - name: "Alice Gaudreau"
    url: https://github.com/alicegaudreau
    affiliation: FAS1002
    affiliation-url: https://FAS1002.github.io/A22
    orcid: 0000-0002-4470-0506

# TRUE == Générer une citation pour cette page précise. Pour enlever, mettre false.
citation: true
# Inclure les références que vous utilisez dans vos rapports. Je conseille Zotero pour construire
# ce fichier ou de connecter RStudio directement pour pouvoir citer avec @nom-de-reference.
bibliography: references.bib
format :
    html:
        df-print: paged
---

```{r echo = FALSE, warning = FALSE, message = FALSE}
 library(fs)
 library(lubridate) #dates
 library(tidyverse) #la vie
 library(skimr) #regarder donnees
 library(ggplot2) #graphiques
 library(kableExtra) #tableau
 library(tinytex) #besoin pour kable
 library(pastecs) #pour faire des analyses descriptives
 library(ggridges) #pour faires des stacked density plots
```

# Exploration des données

## Réimporter les données

Mettre une fonction qui source le document .R avec les données toute propres

```{r récupérer les données}
#récupérer les données 
source("R/helper.R")

#recuperer les donnees si la fonction ne fonctionne pas
# URL_Energy <- "https://github.com/owid/energy-data/raw/11fb69e2c83c73d1e964075d711a03fef6262e9a/owid-energy-data.csv"
#     base_path <- file.path("data", "raw")
#     fichier_Energy_du_jour <- paste(today(), "energy-data.csv", sep = "_") #creer le nom de fichier quon veut avec lubridate
#     fpath_Energy <- file.path(base_path, fichier_Energy_du_jour) #creer le path
# 
# Energie <- read.csv(file = fpath_Energy)

#telechargement donnees gapminder
#telechargement donnees gapminder
download.file("https://docs.google.com/spreadsheets/d/1RheSon1-q4vFc3AGyupVPH6ptEByE-VtnjOCselU0PE/export?format=xlsx", destfile = 'data/raw/GM-LifeExpectancy-countries-by-year.xlsx' )

LifeExp <- read_excel(path ="data/raw/GM-LifeExpectancy-countries-by-year.xlsx", sheet  = 4) 

#merger les données
merged_data <- read_csv(file = "data/raw/merged_data.csv", show_col_types = F)

LifeExp$geo <- toupper(LifeExp$geo)
LifeExp2 <- rename(LifeExp, iso_code = geo, year = time, country = name)

#Mettre Energy et Life Exp ensemble
merged_data <- dplyr::inner_join(Energie, LifeExp2) %>%
  arrange(iso_code, year, country)


#télécharger un CSV qui associe les codes de pays à des continents. 
download.file(url = "https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv", destfile = "data/raw/continents.csv") 

continents <- read_csv(file = "data/raw/continents.csv", show_col_types = F)
```

## Ajout de variables

Afin de faciliter l'analyse de données, il était important de créer certaines nouvelles variables à partir d'informations comprises dans la base de données:

-   Continent

-   PIB par habitant

-   Temps écoulé depuis la collecte de données

La première variable d'intérêt permet de regrouper les pays par continents, afin d'en faire une analyse ciblée. Cela facilitera également la visualisation des données en catégorisant les données en seulement 5 valeurs (Asie, Afrique, Amériques, Europe, Océanie) plutôt qu'en un éventail de pays. Les pays appartenant à chaque continents ont été déterminés à partir des données disponibles par les Nations Unies @continents, et [mises en ligne sur GitHub](https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes).

Ensuite, la variable de PIB a été divisée par la variable de population pour obtenir le PIB par habitant, une mesure plus facilement comparable entre pays.

Enfin, à des fins d'intérêt général, une nouvelle variable calcule le temps écoulé en jours depuis chaque année pour lesquelles les données sont collectées. Les données les plus anciennes présentent à la fois dans la base de données sur l'espérance de vie @gapminderlifeexpectancyatbirth datent de 1952, soit il y a près de 26 000 jours.

En date du 12 décembre 2022, cela faisait très précisément 25 918 jours.

</aside>

```{r ajouter une variable continents}

continents_petit <- continents %>% select("alpha-3", "region") %>% 
    rename(iso_code = "alpha-3", continent = region)


merged_data_continent <- dplyr::inner_join(merged_data, continents_petit) %>%
  arrange(iso_code)

#rendre joli - ggtable or kable 

```

```{r temps ecoule en jours}
LifeExDate <- LifeExp2 %>%
mutate(jour_mois = "-01-01") %>% #ajouter une colonne avec -MM-DD
    unite(year, jour_mois, col = year, sep = "") %>% #combiner les deux colonnes
    mutate(year_as_date = as.Date(year, format = "%Y-%m-%d")) #transformer en format de date
    
nbr_jrs <- as.numeric(difftime(as.POSIXct(today()), 
                    as.POSIXct(as.Date(min(LifeExDate$year_as_date), format = "%Y-%m-%d"))))

nbr_jrs

#25918 jours
    
```

```{r completement se tromper et calculer le temps écoulé en jours depuis chacune des datapoints, echo = FALSE }
#(lubridate)
#class(merged_data_continent$year) #c'est compris comme un integer et non une date actuellement

#je transforme l'annee en characteres de dates YYYY-MM-DD pour que le compte de jours débute à partir du 1er janvier de l'année
merged_data_continent2 <- merged_data_continent %>%
  mutate(jour_mois = "-01-01") %>% #ajouter une colonne avec -MM-DD
   unite(year, jour_mois, col = year, sep = "") %>% #combiner les deux colonnes
    mutate(year_as_date = as.Date(year, format = "%Y-%m-%d")) #transformer en format de date

class(merged_data_continent2$year_as_date) #succès !!!!

#Tentative 1 avec des dates POSIXct et difftime
full_db <- merged_data_continent2 %>%  mutate(temps_depuis = as.numeric(difftime(as.POSIXct(today()), as.POSIXct(year_as_date)))) #ça marche


full_db <- merged_data_continent



```

```{r ajouter une variable gdp per capita}

full_db2 <- full_db %>% mutate(gdp_per_capita = (gdp/population))
```

## Manipulations des données

En premier lieu, il est nécessaire de vérifier que les données sont stockées correctement afin de pouvoir faire des manipulation à partir de celles-ci. Les manipulations effectuées permettent d'abord de s'assurer que les données sont du bon type (ex : que les chiffres sont interprétés en chiffres (integers)). Dans le cas de cette base de données, les données sont de bonne qualité et peu d'ajustements sont nécessaires.

## Exploration

Le code ci-bas permet d'explorer les données. L'analyse à proprement parler est disponible sur la page d'accueil.

```{r manip}


#transformer en tibble
full_db_tibble <- as_tibble(full_db2)

#Variables de base
print(class(full_db_tibble$population)) #numeric ok
summary(full_db_tibble$`Life expectancy`) #numeric ok # les donnees minimum sont vraiment petites. 6 ans, vraiment ?
summary(full_db_tibble$gdp_per_capita) 

#Conso energie
summary(full_db_tibble$primary_energy_consumption) #il y a un zero, c'est bizarre. Je vais cibler les données de pays ayant des données complètes. 

#Prod energie
summary(full_db_tibble$oil_prod_per_capita)
summary(full_db_tibble$gas_prod_per_capita)
summary(full_db_tibble$coal_prod_per_capita)
summary(full_db_tibble$oil_production)
summary(full_db_tibble$gas_production) #bon, vu que je regarde l"ensemble des donnees de differentes annees de production, la mediane est vraiment basse par rapport au maximum. Pour mes tableaux descriptifs, je vais me concentrer sur des annees en particulier. 
summary(full_db_tibble$coal_production)
summary(full_db_tibble$year)



```

```{r stats descriptives}

stats_descriptives <- full_db_tibble %>% 
    select(population,`Life expectancy`, gdp_per_capita, primary_energy_consumption, oil_production,gas_production,coal_production) %>% 
    pastecs::stat.desc()

kable(stats_descriptives)

stats_descriptives

max_oil <- full_db_tibble %>% 
    select(country, year, oil_production,gas_production,coal_production)

mean(full_db_tibble$primary_energy_consumption, na.rm = T)
median(full_db_tibble$primary_energy_consumption, na.rm = T)

#Données 2021
donnees_2021  <- subset(full_db_tibble, year=='2021')

mean(donnees_2021$primary_energy_consumption, na.rm = T)
median(donnees_2021$primary_energy_consumption, na.rm = T)
```

## Exportation

Les données combinées et manipulées sont disponibles sur [GitHub](https://github.com/alicegaudreau/FAS1002_projet-pratique/raw/main/data/processed/full_database_combined.csv).

```{r exportation}
write_csv(full_db_tibble,file = "data/processed/full_database_combined.csv")
```
